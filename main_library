local SokaHubUI = {}

SokaHubUI.Configs = {}
SokaHubUI.ActiveKeybinds = SokaHubUI.ActiveKeybinds or {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Helper color functions
local function Color3ToHex(color)
    local r = math.floor(color.R * 255)
    local g = math.floor(color.G * 255)
    local b = math.floor(color.B * 255)
    return string.format("%02X%02X%02X", r, g, b)
end

local function HexToColor3(hex)
    hex = hex:gsub("#", "")
    local r = tonumber(hex:sub(1, 2), 16) / 255
    local g = tonumber(hex:sub(3, 4), 16) / 255
    local b = tonumber(hex:sub(5, 6), 16) / 255
    return Color3.new(r, g, b)
end

-- Utility function to create instances
local function Create(instance, properties)
    local obj = Instance.new(instance)
    for i, v in pairs(properties or {}) do
        obj[i] = v
    end
    return obj
end

-- Apply hover animation to a TextButton
local function applyHoverAnimation(button)
    if not button:IsA("TextButton") then return end
    local originalColor = button.BackgroundColor3
    local hoverColor = originalColor:lerp(Color3.new(1, 1, 1), 0.1)
    local tweenInfo = TweenInfo.new(0.15)

    button.MouseEnter:Connect(function()
        TweenService:Create(button, tweenInfo, { BackgroundColor3 = hoverColor }):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, tweenInfo, { BackgroundColor3 = originalColor }):Play()
    end)
end

-- Make a frame draggable
local function MakeDraggable(dragArea, frame)
    local dragging = false
    local dragStart, startPos

    dragArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            local conn
            conn = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    if conn then
                        conn:Disconnect()
                    end
                end
            end)
        end
    end)

    dragArea.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Core objects
local Window = {}
Window.__index = Window

-- Create a tab
function Window:CreateTab(name)
    local container = Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
        Parent = self._content,
        CanvasSize = UDim2.new(0, 0, 0, 0),
    })

    local layout = Create("UIListLayout", {
        Parent = container,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
    })

    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        container.CanvasSize = UDim2.new(0, container.AbsoluteSize.X, 0, layout.AbsoluteContentSize.Y)
    end)

    container.Visible = (#self.Tabs == 0)

    local tab = {
        Name = name,
        Sections = {},
        _container = container,
    }

    setmetatable(tab, {
        __index = {
            CreateSection = function(self, sectionName)
                local sectionFrame = Create("Frame", {
                    Size = UDim2.new(1, -10, 0, 150),
                    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
                    BorderSizePixel = 0,
                    Name = sectionName,
                    Parent = self._container,
                })

                Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = sectionFrame })

                local sectionLabel = Create("TextLabel", {
                    Size = UDim2.new(1, 0, 0, 30),
                    Text = sectionName,
                    BackgroundTransparency = 1,
                    TextColor3 = Color3.new(1, 1, 1),
                    Font = Enum.Font.SourceSansBold,
                    TextSize = 20,
                    Parent = sectionFrame,
                })

                local layout = Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = sectionFrame,
                    Padding = UDim.new(0, 5),
                })

                local section = {
                    Frame = sectionFrame,
                    Elements = {},
                }

                table.insert(self.Sections, section)

                -- Define UI elements for the section
                function section:NewToggle(text, desc, callback)
                    local toggle = { State = false }
                    local btn = Create("TextButton", {
                        Size = UDim2.new(1, -10, 0, 30),
                        Text = text .. "   [OFF]",
                        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
                        TextColor3 = Color3.new(1, 1, 1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sectionFrame,
                    })

                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    applyHoverAnimation(btn)

                    btn.MouseButton1Click:Connect(function()
                        toggle.State = not toggle.State
                        btn.Text = text .. (toggle.State and "   [ON]" or "   [OFF]")
                        if callback then
                            callback(toggle.State)
                        end
                        btn:SetAttribute("_configValue", toggle.State)
                    end)

                    btn:SetAttribute("_configType", "toggle")
                    table.insert(self.Elements, btn)
                end

                -- Additional UI element functions (NewSlider, NewKeybind, etc.) would go here...

                return section
            end,
        },
    })

    table.insert(self.Tabs, tab)

    if self._tabBar then
        self._tabBar:Refresh(self.Tabs)
    end

    return tab
end

-- Create a tab bar UI for switching tabs
function Window:CreateTabBar()
    local tabBar = Create("Frame", {
        Name = "TabBar",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Parent = self._Main,
    })

    Create("UICorner", { CornerRadius = UDim.new(0, 10), Parent = tabBar })

    function tabBar:Refresh(tabs)
        for _, child in ipairs(self:GetChildren()) do
            if child:IsA("GuiObject") then
                child:Destroy()
            end
        end

        for i, tab in ipairs(tabs) do
            local btn = Create("TextButton", {
                Name = tab.Name,
                Text = tab.Name,
                Size = UDim2.new(1/#tabs, 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(50, 50, 50),
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.SourceSans,
                TextSize = 18,
                Parent = self,
            })

            Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
            applyHoverAnimation(btn)

            btn.MouseButton1Click:Connect(function()
                for _, otherTab in ipairs(tabs) do
                    otherTab._container.Visible = false
                end
                tab._container.Visible = true
            end)
        end
    end

    return tabBar
end

-- Toggle the entire UI's visibility
function Window:ToggleUI()
    self._Main.Enabled = not self._Main.Enabled
end

-- Change the theme for all UI elements
function Window:ChangeTheme(newTheme)
    newTheme = newTheme or {
        Main = Color3.fromRGB(30, 30, 30),
        TabBar = Color3.fromRGB(30, 30, 30),
        Button = Color3.fromRGB(50, 50, 50),
        Text = Color3.new(1, 1, 1)
    }

    self._Main.BackgroundColor3 = newTheme.Main
    if self._tabBar then
        self._tabBar.BackgroundColor3 = newTheme.TabBar
        for _, child in ipairs(self._tabBar:GetChildren()) do
            if child:IsA("TextButton") then
                child.BackgroundColor3 = newTheme.Button
                child.TextColor3 = newTheme.Text
            end
        end
    end

    for _, tab in ipairs(self.Tabs) do
        tab._container.BackgroundColor3 = newTheme.Main
        for _, section in ipairs(tab.Sections) do
            if section.Frame then
                section.Frame.BackgroundColor3 = newTheme.Button
                for _, obj in ipairs(section.Frame:GetChildren()) do
                    if obj:IsA("TextLabel") then
                        obj.TextColor3 = newTheme.Text
                    elseif obj:IsA("TextButton") then
                        obj.BackgroundColor3 = newTheme.Button
                        obj.TextColor3 = newTheme.Text
                    end
                end
            end
        end
    end
end

-- Save current config
function Window:SaveConfig(configName)
    local config = {}
    for _, tab in ipairs(self.Tabs) do
        for _, section in ipairs(tab.Sections) do
            for _, element in ipairs(section.Elements) do
                local configType = element:GetAttribute("_configType")
                local configValue = element:GetAttribute("_configValue")
                if configType and configValue then
                    config[tab.Name] = config[tab.Name] or {}
                    config[tab.Name][section.Frame.Name] = config[tab.Name][section.Frame.Name] or {}
                    config[tab.Name][section.Frame.Name][configType] = configValue
                end
            end
        end
    end
    SokaHubUI.Configs[configName] = config
end

-- Load a saved configuration
function Window:LoadConfig(configName)
    local config = SokaHubUI.Configs[configName]
    if not config then return end

    for tabName, sections in pairs(config) do
        for sectionName, values in pairs(sections) do
            for configType, value in pairs(values) do
                for _, tab in ipairs(self.Tabs) do
                    if tab.Name == tabName then
                        for _, section in ipairs(tab.Sections) do
                            if section.Frame.Name == sectionName then
                                local element = section.Elements[1]
                                if element and element:GetAttribute("_configType") == configType then
                                    element:SetAttribute("_configValue", value)
                                    if configType == "toggle" then
                                        element.Text = tabName .. "   [" .. (value and "ON" or "OFF") .. "]"
                                    elseif configType == "slider" then
                                        local title = element:FindFirstChildOfClass("TextLabel")
                                        title.Text = title.Text:match("^(.*) %((%d+)%)$"):format(title.Text:match("^(.*) %((%d+)%$"), value)
                                    elseif configType == "keybind" then
                                        local label = element:FindFirstChildOfClass("TextLabel")
                                        label.Text = tabName .. " [" .. value .. "]"
                                    elseif configType == "colorPicker" then
                                        local colorBox = element:FindFirstChildOfClass("TextButton")
                                        colorBox.BackgroundColor3 = HexToColor3(value)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

-- Initialize the main UI window
function SokaHubUI:Init()
    self._Main = Create("ScreenGui", {
        Name = "SokaHubUI",
        ResetOnSpawn = false,
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"),
    })

    self.Tabs = {}
    self._tabBar = self:CreateTabBar()
    self._tabBar.Parent = self._Main

    self._content = Create("Frame", {
        Size = UDim2.new(1, 0, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Parent = self._Main,
    })

    Create("UICorner", { CornerRadius = UDim.new(0, 10), Parent = self._content })
end

return SokaHubUI
