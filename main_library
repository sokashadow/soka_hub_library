--[[ 
	SokaHub UI Library
	
	------------------
	
	This is an enhanced UI library for Roblox that creates a draggable window with tabs and sections.
	It includes rounded corners, gradients/shadows, click/hover animations, smooth window entrance/exit,
	and a dynamic theme system with a simple theme picker.
	
	Usage:
		local Library = loadstring(game:HttpGet("https://yourdomain.com/SokaHubUI.lua"))()
		local Window = Library:CreateWindow("Soka Hub", "DarkTheme")
		-- later, you can change the theme via:
		Window:ChangeTheme({
			Background = Color3.fromRGB(20,20,20),
			Title = Color3.new(1,1,1),
			Text = Color3.new(1,1,1),
			Accent = Color3.fromRGB(200,50,50)
		})
	-- Extend as needed.
--]]

local SokaHubUI = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

----------------------------------------------------------------
-- Utility functions
----------------------------------------------------------------
local function Create(instance, properties)
	local obj = Instance.new(instance)
	for i, v in pairs(properties or {}) do
		obj[i] = v
	end
	return obj
end

-- Simple drag functionality for a frame.
local function MakeDraggable(frame)
	local dragging, dragInput, dragStart, startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

-- Simple tween function for hover/click animations.
local function Tween(obj, properties, duration)
	duration = duration or 0.2
	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
	local tween = TweenService:Create(obj, tweenInfo, properties)
	tween:Play()
	return tween
end

----------------------------------------------------------------
-- Core objects
----------------------------------------------------------------
-- Window Object
local Window = {}
Window.__index = Window

-- CreateTab â€“ each tab creates a container for sections.
function Window:CreateTab(name)
	local tab = {
		Name = name,
		Sections = {}
	}
	setmetatable(tab, {
		__index = {
			CreateSection = function(self, sectionName)
				-- Create a simple frame container for a section.
				local sectionFrame = Create("Frame", {
					Size = UDim2.new(0, 250, 0, 150),
					BackgroundColor3 = self.ParentWindow.Theme.Background,
					BorderSizePixel = 0,
					Name = sectionName,
					Parent = self._container
				})
				
				-- A label for the section.
				local sectionLabel = Create("TextLabel", {
					Size = UDim2.new(1, 0, 0, 30),
					Text = sectionName,
					BackgroundTransparency = 1,
					TextColor3 = self.ParentWindow.Theme.Text,
					Font = Enum.Font.SourceSansBold,
					TextSize = 20,
					Parent = sectionFrame,
				})
				
				-- Layout for the section elements.
				local layout = Create("UIListLayout",{
					SortOrder = Enum.SortOrder.LayoutOrder,
					Parent = sectionFrame
				})
				
				local section = {
					Frame = sectionFrame,
					Elements = {},
					ParentWindow = self.ParentWindow
				}
				
				-- Methods to add elements:
				function section:NewToggle(text, desc, callback)
					local toggle = { State = false }
					local btn = Create("TextButton", {
						Size = UDim2.new(1, -10, 0, 30),
						Text = text.." [OFF]",
						BackgroundColor3 = self.ParentWindow.Theme.Accent,
						TextColor3 = self.ParentWindow.Theme.Text,
						Font = Enum.Font.SourceSans,
						TextSize = 18,
						Parent = sectionFrame,
					})
					-- Add hover animation.
					btn.MouseEnter:Connect(function()
						Tween(btn, {BackgroundColor3 = self.ParentWindow.Theme.Accent:lerp(Color3.new(1,1,1),0.2)}, 0.15)
					end)
					btn.MouseLeave:Connect(function()
						Tween(btn, {BackgroundColor3 = self.ParentWindow.Theme.Accent}, 0.15)
					end)
					btn.MouseButton1Click:Connect(function()
						toggle.State = not toggle.State
						btn.Text = text .. (toggle.State and " [ON]" or " [OFF]")
						if callback then
							callback(toggle.State)
						end
						-- Click animation.
						Tween(btn, {Size = UDim2.new(1, -10, 0, 28)}, 0.05)
						task.wait(0.05)
						Tween(btn, {Size = UDim2.new(1, -10, 0, 30)}, 0.05)
					end)
					table.insert(self.Elements, btn)
				end
				
				function section:NewSlider(text, desc, max, min, callback, default)
					local defaultVal = default or min or 0
					local sliderFrame = Create("Frame", {
						Size = UDim2.new(1, -10, 0, 40),
						BackgroundColor3 = self.ParentWindow.Theme.Accent,
						Parent = sectionFrame,
					})
					
					local title = Create("TextLabel", {
						Size = UDim2.new(1, 0, 0, 20),
						Text = text .. " ("..defaultVal..")",
						BackgroundTransparency = 1,
						TextColor3 = self.ParentWindow.Theme.Text,
						Font = Enum.Font.SourceSans,
						TextSize = 18,
						Parent = sliderFrame,
					})
					
					local slider = Create("Frame", {
						Size = UDim2.new(0, 0, 0, 10),
						BackgroundColor3 = self.ParentWindow.Theme.Text,
						Position = UDim2.new(0, 0, 1, -10),
						Parent = sliderFrame,
					})
					
					local dragging = false
					sliderFrame.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							dragging = true
						end
					end)
					sliderFrame.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							dragging = false
						end
					end)
					sliderFrame.InputChanged:Connect(function(input)
						if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
							local x = math.clamp(input.Position.X - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
							local percent = x / sliderFrame.AbsoluteSize.X
							local value = math.floor(min + (max - min) * percent)
							title.Text = text .. " (".. value..")"
							slider.Size = UDim2.new(percent, 0, 0, 10)
							if callback then
								callback(value)
							end
						end
					end)
					table.insert(self.Elements, sliderFrame)
				end
				
				function section:NewKeybind(text, desc, key, callback)
					local keybindFrame = Create("Frame", {
						Size = UDim2.new(1, -10, 0, 30),
						BackgroundColor3 = self.ParentWindow.Theme.Accent,
						Parent = sectionFrame,
					})
					
					local label = Create("TextLabel", {
						Size = UDim2.new(0.6, 0, 1, 0),
						Text = text .. " [" .. key.Name .. "]",
						BackgroundTransparency = 1,
						TextColor3 = self.ParentWindow.Theme.Text,
						Font = Enum.Font.SourceSans,
						TextSize = 18,
						Parent = keybindFrame,
					})
					
					local btn = Create("TextButton", {
						Size = UDim2.new(0.4, 0, 1, 0),
						Text = "Change",
						BackgroundColor3 = self.ParentWindow.Theme.Accent,
						TextColor3 = self.ParentWindow.Theme.Text,
						Font = Enum.Font.SourceSans,
						TextSize = 18,
						Parent = keybindFrame,
					})
					
					btn.MouseButton1Click:Connect(function()
						label.Text = text .. " [ ... ]"
						local input = UserInputService.InputBegan:Wait()
						key = input.KeyCode
						label.Text = text .. " [" .. key.Name .. "]"
						if callback then
							callback(key)
						end
						-- Click animation.
						Tween(btn, {Size = UDim2.new(0.4, 0, 1, -2)}, 0.05)
						task.wait(0.05)
						Tween(btn, {Size = UDim2.new(0.4, 0, 1, 0)}, 0.05)
					end)
					
					table.insert(self.Elements, keybindFrame)
				end
				
				function section:NewButton(text, desc, callback)
					local btn = Create("TextButton", {
						Size = UDim2.new(1, -10, 0, 30),
						Text = text,
						BackgroundColor3 = self.ParentWindow.Theme.Accent,
						TextColor3 = self.ParentWindow.Theme.Text,
						Font = Enum.Font.SourceSans,
						TextSize = 18,
						Parent = sectionFrame,
					})
					
					btn.MouseEnter:Connect(function()
						Tween(btn, {BackgroundColor3 = self.ParentWindow.Theme.Accent:lerp(Color3.new(1,1,1),0.2)}, 0.15)
					end)
					btn.MouseLeave:Connect(function()
						Tween(btn, {BackgroundColor3 = self.ParentWindow.Theme.Accent}, 0.15)
					end)
					btn.MouseButton1Click:Connect(function()
						if callback then
							callback()
						end
						Tween(btn, {Size = UDim2.new(1, -10, 0, 28)}, 0.05)
						task.wait(0.05)
						Tween(btn, {Size = UDim2.new(1, -10, 0, 30)}, 0.05)
					end)
					
					table.insert(self.Elements, btn)
				end
				
				return section
			end,
			_container = self._content,  -- container for sections within a tab
			ParentWindow = self.ParentWindow
		}
	})
	table.insert(self.Tabs, tab)
	-- For simplicity, add a text label as the tab button.
	local tabLabel = Create("TextLabel", {
		Size = UDim2.new(0, 100, 0, 30),
		Text = name,
		BackgroundColor3 = self.ParentWindow.Theme.Accent,
		TextColor3 = self.ParentWindow.Theme.Text,
		Font = Enum.Font.SourceSansBold,
		TextSize = 20,
		Parent = self._tabHolder,
	})
	return tab
end

----------------------------------------------------------------
-- Library Creation and Window Setup
----------------------------------------------------------------
function SokaHubUI:CreateWindow(title, themeName)
	-- Default themes
	local themes = {
		DarkTheme = {
			Background = Color3.fromRGB(20,20,20),
			Title = Color3.new(1,1,1),
			Text = Color3.new(1,1,1),
			Accent = Color3.fromRGB(200,50,50)
		},
		LightTheme = {
			Background = Color3.fromRGB(240,240,240),
			Title = Color3.new(0,0,0),
			Text = Color3.new(0,0,0),
			Accent = Color3.fromRGB(50,150,250)
		}
	}
	-- Use provided themeName or fallback to DarkTheme
	local currentTheme = themes[themeName] or themes["DarkTheme"]

	-- Create main ScreenGui and Window Frame; parent to PlayerGui
	local ScreenGui = Create("ScreenGui", {
		Name = "SokaHubUI",
		Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
	})
	
	local MainFrame = Create("Frame", {
		Size = UDim2.new(0, 600, 0, 400),
		Position = UDim2.new(0.5, -300, 0.5, -200),
		BackgroundColor3 = currentTheme.Background,
		BorderSizePixel = 0,
		Parent = ScreenGui,
		ClipsDescendants = true
	})
	-- Entrance animation: start fully transparent then fade in
	MainFrame.BackgroundTransparency = 1
	TweenService:Create(MainFrame, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()

	-- Add UIStroke for subtle border/shadow effect
	local stroke = Create("UIStroke", {
		Thickness = 2,
		Transparency = 0.5,
		Color = currentTheme.Accent,
		ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
		Parent = MainFrame
	})
	
	-- Add rounded corners to the main window
	local mainCorner = Create("UICorner", {
		CornerRadius = UDim.new(0, 8),
		Parent = MainFrame
	})
	
	-- Title label with gradient
	local TitleLabel = Create("TextLabel", {
		Size = UDim2.new(1, -40, 0, 30),
		Position = UDim2.new(0, 5, 0, 5),
		Text = title,
		BackgroundTransparency = 1,
		TextColor3 = currentTheme.Title,
		Font = Enum.Font.SourceSansBold,
		TextSize = 24,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = MainFrame
	})
	-- Apply a UIGradient to the title for a subtle shine effect
	local titleGradient = Create("UIGradient", {
		Color = ColorSequence.new({ColorSequenceKeypoint.new(0, currentTheme.Title), ColorSequenceKeypoint.new(1, currentTheme.Accent)}),
		Rotation = 90,
		Parent = TitleLabel
	})
	
	-- Close button in the top-right corner
	local CloseButton = Create("TextButton", {
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -35, 0, 5),
		Text = "X",
		BackgroundColor3 = currentTheme.Accent,
		TextColor3 = Color3.new(1,1,1),
		Font = Enum.Font.SourceSansBold,
		TextSize = 18,
		Parent = MainFrame
	})
	local closeCorner = Create("UICorner", {
		CornerRadius = UDim.new(0, 8),
		Parent = CloseButton
	})
	-- Smooth exit animation on close
	CloseButton.MouseButton1Click:Connect(function()
		TweenService:Create(MainFrame, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
		task.wait(0.5)
		ScreenGui:Destroy()
	end)
	
	-- Holder for Tabs
	local TabHolder = Create("Frame", {
		Size = UDim2.new(1, 0, 0, 40),
		Position = UDim2.new(0,0,0,40),
		BackgroundColor3 = currentTheme.Accent,
		BorderSizePixel = 0,
		Parent = MainFrame
	})
	
	-- Content holder for tab contents (sections)
	local ContentHolder = Create("Frame", {
		Size = UDim2.new(1, 0, 1, -80),
		Position = UDim2.new(0,0,0,80),
		BackgroundColor3 = currentTheme.Background,
		BorderSizePixel = 0,
		Parent = MainFrame
	})
	
	-- Make the MainFrame draggable
	MakeDraggable(MainFrame)
	
	-- Window object setup
	local window = setmetatable({
		_Tabs = {},
		Tabs = {},
		_tabHolder = TabHolder,
		_content = ContentHolder,
		Screen = ScreenGui,
		Window = MainFrame,
		Title = title,
		Theme = currentTheme,
		Themes = themes,
		ChangeTheme = function(self, newTheme)
			-- Expects newTheme as a table with Background, Title, Text, Accent keys.
			self.Theme = newTheme
			-- Update window elements with the new theme
			MainFrame.BackgroundColor3 = newTheme.Background
			stroke.Color = newTheme.Accent
			TitleLabel.TextColor3 = newTheme.Title
			TitleLabel.UIGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, newTheme.Title), ColorSequenceKeypoint.new(1, newTheme.Accent)})
			TabHolder.BackgroundColor3 = newTheme.Accent
		end,
	}, Window)
	
	-- Add a simple Settings tab with a theme picker for demonstration
	do
		local settingsTab = window:CreateTab("Settings")
		local settingsSection = settingsTab:CreateSection("Theme Picker")
		
		-- Create basic color boxes where users can type in hex values; note conversion from hex to Color3 needed.
		-- For simplicity, we'll use TextBoxes and a button to apply.
		local hexToColor3 = function(hex)
			hex = hex:gsub("#","")
			if #hex == 6 then
				local r = tonumber(hex:sub(1,2), 16)
				local g = tonumber(hex:sub(3,4), 16)
				local b = tonumber(hex:sub(5,6), 16)
				return Color3.fromRGB(r, g, b)
			end
			return nil
		end
		
		local applyButton = Create("TextButton", {
			Size = UDim2.new(1, -10, 0, 30),
			Text = "Apply Theme",
			BackgroundColor3 = window.Theme.Accent,
			TextColor3 = window.Theme.Text,
			Font = Enum.Font.SourceSans,
			TextSize = 18,
		})
		local bgBox = Create("TextBox", {
			Size = UDim2.new(1, -10, 0, 30),
			Text = "#141414", -- default
			PlaceholderText = "Background Hex",
			BackgroundColor3 = Color3.new(1,1,1),
			TextColor3 = Color3.new(0,0,0),
			Font = Enum.Font.SourceSans,
			TextSize = 18,
		})
		local titleBox = Create("TextBox", {
			Size = UDim2.new(1, -10, 0, 30),
			Text = "#FFFFFF", -- default
			PlaceholderText = "Title Hex",
			BackgroundColor3 = Color3.new(1,1,1),
			TextColor3 = Color3.new(0,0,0),
			Font = Enum.Font.SourceSans,
			TextSize = 18,
		})
		local textBox = Create("TextBox", {
			Size = UDim2.new(1, -10, 0, 30),
			Text = "#FFFFFF", -- default
			PlaceholderText = "Text Hex",
			BackgroundColor3 = Color3.new(1,1,1),
			TextColor3 = Color3.new(0,0,0),
			Font = Enum.Font.SourceSans,
			TextSize = 18,
		})
		local accentBox = Create("TextBox", {
			Size = UDim2.new(1, -10, 0, 30),
			Text = "#C83232", -- default
			PlaceholderText = "Accent Hex",
			BackgroundColor3 = Color3.new(1,1,1),
			TextColor3 = Color3.new(0,0,0),
			Font = Enum.Font.SourceSans,
			TextSize = 18,
		})
		
		-- Arrange the controls in the section
		bgBox.Parent = settingsSection.Frame
		titleBox.Parent = settingsSection.Frame
		textBox.Parent = settingsSection.Frame
		accentBox.Parent = settingsSection.Frame
		applyButton.Parent = settingsSection.Frame
		
		applyButton.MouseButton1Click:Connect(function()
			local newTheme = {
				Background = hexToColor3(bgBox.Text) or window.Theme.Background,
				Title = hexToColor3(titleBox.Text) or window.Theme.Title,
				Text = hexToColor3(textBox.Text) or window.Theme.Text,
				Accent = hexToColor3(accentBox.Text) or window.Theme.Accent,
			}
			window:ChangeTheme(newTheme)
		end)
	end
	
	return window
end

return SokaHubUI
