--[[
    SokaHub UI Library (Modified)

    Features added in this version:
      • A ScrollingFrame for tab content (sections) so that if content is long it scrolls.
      • Rounded corners and improved color styling for buttons/toggles (Kavo UI–like).
      • Dragging only via the top Title bar instead of the entire window.
      • NewDropdown and NewColorPicker element methods.
      • A ChangeTheme function (both as a method on Window and via SokaHubUI).
      • A ToggleUI function on the Window to show/hide the interface.
      • Config saving/loading functionality:
           ▪ SaveConfig and LoadConfig methods on the Window iterate over each section’s elements.
           ▪ A Settings tab that includes a dropdown for selecting configs, a Save Config button, a ToggleUI button,
             and a Change Theme button.

    Further ideas:
      • Add animations (UI tweening) when a button is hovered.
      • Add notifications for key events.
      • Provide theme switching with custom gradients and fonts.
      • Expand element options (like icons on buttons, extra callbacks for changes).
--]]

local SokaHubUI = {}
SokaHubUI.Configs = {}  -- table to store configuration presets
SokaHubUI.ActiveKeybinds = SokaHubUI.ActiveKeybinds or {}  -- table to store keybinds for persistent listening

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

----------------------------------------------------------------
-- Helper color functions
----------------------------------------------------------------

local function Color3ToHex(color)
    local r = math.floor(color.R * 255)
    local g = math.floor(color.G * 255)
    local b = math.floor(color.B * 255)
    return string.format("%02X%02X%02X", r, g, b)
end

local function HexToColor3(hex)
    hex = hex:gsub("#", "")
    local r = tonumber(hex:sub(1,2), 16) / 255
    local g = tonumber(hex:sub(3,4), 16) / 255
    local b = tonumber(hex:sub(5,6), 16) / 255
    return Color3.new(r, g, b)
end

----------------------------------------------------------------
-- Utility functions
----------------------------------------------------------------

local function Create(instance, properties)
    local obj = Instance.new(instance)
    for i, v in pairs(properties or {}) do
        obj[i] = v
    end
    return obj
end

-- Only allow dragging from the title bar.
local function MakeDraggable(dragArea, frame)
    local dragging = false
    local dragStart, startPos
    dragArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            local conn
            conn = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    if conn then
                        conn:Disconnect()
                    end
                end
            end)
        end
    end)
    dragArea.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

----------------------------------------------------------------
-- Core objects
----------------------------------------------------------------

-- Window Object
local Window = {}
Window.__index = Window

-- Create a tab; each tab has its own content container and holds sections.
function Window:CreateTab(name)
    local container = Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
        Parent = self._content,
        CanvasSize = UDim2.new(0, 0, 0, 0),
    })
    local layout = Create("UIListLayout", {
        Parent = container,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
    })
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        container.CanvasSize = UDim2.new(0, container.AbsoluteSize.X, 0, layout.AbsoluteContentSize.Y)
    end)
    container.Visible = (#self.Tabs == 0)  -- first tab visible

    local tab = {
        Name = name,
        Sections = {},
        _container = container,
    }
    setmetatable(tab, {
        __index = {
            CreateSection = function(self, sectionName)
                local sectionFrame = Create("Frame", {
                    Size = UDim2.new(1, -10, 0, 150),
                    BackgroundColor3 = Color3.fromRGB(30,30,30),
                    BorderSizePixel = 0,
                    Name = sectionName,
                    Parent = self._container,
                })
                Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = sectionFrame })
                
                local sectionLabel = Create("TextLabel", {
                    Size = UDim2.new(1, 0, 0, 30),
                    Text = sectionName,
                    BackgroundTransparency = 1,
                    TextColor3 = Color3.new(1,1,1),
                    Font = Enum.Font.SourceSansBold,
                    TextSize = 20,
                    Parent = sectionFrame,
                })
                local layout = Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = sectionFrame,
                    Padding = UDim.new(0, 5),
                })
                local section = {
                    Frame = sectionFrame,
                    Elements = {}, -- elements for config saving/loading
                }
                table.insert(self.Sections, section)
                
                function section:NewToggle(text, desc, callback)
                    local toggle = { State = false }
                    local btn = Create("TextButton", {
                        Size = UDim2.new(1, -10, 0, 30),
                        Text = text .. "   [OFF]",
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    btn.MouseButton1Click:Connect(function()
                        toggle.State = not toggle.State
                        btn.Text = text .. (toggle.State and "   [ON]" or "   [OFF]")
                        if callback then
                            callback(toggle.State)
                        end
                        btn:SetAttribute("_configValue", toggle.State)
                    end)
                    btn:SetAttribute("_configType", "toggle")
                    table.insert(self.Elements, btn)
                end

                function section:NewSlider(text, desc, max, min, callback, default)
                    local defaultVal = default or min or 0
                    local sliderFrame = Create("Frame", {
                        Size = UDim2.new(1, -10, 0, 40),
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = sliderFrame })
                    local title = Create("TextLabel", {
                        Size = UDim2.new(1, 0, 0, 20),
                        Text = text .. " (" .. defaultVal .. ")",
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sliderFrame,
                    })
                    local slider = Create("Frame", {
                        Size = UDim2.new(0, 0, 0, 10),
                        BackgroundColor3 = Color3.new(1,1,1),
                        Position = UDim2.new(0, 0, 1, -10),
                        Parent = sliderFrame,
                    })
                    local dragging = false
                    sliderFrame.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = true
                        end
                    end)
                    sliderFrame.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = false
                        end
                    end)
                    sliderFrame.InputChanged:Connect(function(input)
                        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                            local x = math.clamp(input.Position.X - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
                            local percent = x / sliderFrame.AbsoluteSize.X
                            local value = math.floor(min + (max - min) * percent)
                            title.Text = text .. " (" .. value .. ")"
                            slider.Size = UDim2.new(percent, 0, 0, 10)
                            if callback then
                                callback(value)
                            end
                            sliderFrame:SetAttribute("_configValue", value)
                        end
                    end)
                    sliderFrame:SetAttribute("_configType", "slider")
                    table.insert(self.Elements, sliderFrame)
                end

                function section:NewKeybind(text, desc, key, callback)
                    local keybindFrame = Create("Frame", {
                        Size = UDim2.new(1, -10, 0, 30),
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = keybindFrame })
                    local label = Create("TextLabel", {
                        Size = UDim2.new(0.6, 0, 1, 0),
                        Text = text .. " [" .. key.Name .. "]",
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = keybindFrame,
                    })
                    local btn = Create("TextButton", {
                        Size = UDim2.new(0.4, 0, 1, 0),
                        Text = "Change",
                        BackgroundColor3 = Color3.fromRGB(70,70,70),
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = keybindFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    btn.MouseButton1Click:Connect(function()
                        label.Text = text .. " [Press a key]"
                        local keyConnection
                        keyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                            if gameProcessed then return end
                            key = input.KeyCode
                            label.Text = text .. " [" .. key.Name .. "]"
                            if callback then
                                callback(key)
                            end
                            keybindFrame:SetAttribute("_configValue", key.Name)
                            SokaHubUI.ActiveKeybinds[keybindFrame] = {
                                key = key,
                                callback = callback,
                            }
                            keyConnection:Disconnect()
                        end)
                    end)
                    keybindFrame:SetAttribute("_configType", "keybind")
                    table.insert(self.Elements, keybindFrame)
                    SokaHubUI.ActiveKeybinds[keybindFrame] = {
                        key = key,
                        callback = callback,
                    }
                end

                function section:NewButton(text, desc, callback)
                    local btn = Create("TextButton", {
                        Size = UDim2.new(1, -10, 0, 30),
                        Text = text,
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    btn.MouseButton1Click:Connect(function()
                        if callback then
                            callback()
                        end
                    end)
                    btn:SetAttribute("_configType", "button")
                    table.insert(self.Elements, btn)
                end

                function section:NewColorPicker(text, desc, defaultColor, callback)
                    local colorOptions = {
                        Color3.fromRGB(255, 0, 0),
                        Color3.fromRGB(0, 255, 0),
                        Color3.fromRGB(0, 0, 255),
                        Color3.fromRGB(255, 255, 0),
                        Color3.fromRGB(0, 255, 255),
                        Color3.fromRGB(255, 0, 255),
                        Color3.fromRGB(255, 255, 255)
                    }
                    local currentIndex = 1
                    for i, col in ipairs(colorOptions) do
                        if Color3ToHex(col) == Color3ToHex(defaultColor) then
                            currentIndex = i
                            break
                        end
                    end
                    local pickerFrame = Create("Frame", {
                        Size = UDim2.new(1, -10, 0, 30),
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = pickerFrame })
                    local label = Create("TextLabel", {
                        Size = UDim2.new(0.6, 0, 1, 0),
                        Text = text,
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = pickerFrame,
                    })
                    local colorBox = Create("TextButton", {
                        Size = UDim2.new(0.4, -5, 1, 0),
                        Text = "",
                        BackgroundColor3 = colorOptions[currentIndex],
                        Parent = pickerFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = colorBox })
                    colorBox.MouseButton1Click:Connect(function()
                        currentIndex = (currentIndex % #colorOptions) + 1
                        local newColor = colorOptions[currentIndex]
                        colorBox.BackgroundColor3 = newColor
                        if callback then
                            callback(newColor)
                        end
                        pickerFrame:SetAttribute("_configValue", Color3ToHex(newColor))
                    end)
                    table.insert(self.Elements, pickerFrame)
                end

                return section
            end,  -- End CreateSection
        },
    })
    table.insert(self.Tabs, tab)
    if self._tabBar then
        self._tabBar:Refresh(self.Tabs)
    end
    return tab
end

----------------------------------------------------------------
-- Create a tab bar UI for switching tabs.
----------------------------------------------------------------

function Window:CreateTabBar()
    local tabBar = Create("Frame", {
        Name = "TabBar",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(30,30,30),
        Parent = self._Main,
    })
    Create("UICorner", { CornerRadius = UDim.new(0, 10), Parent = tabBar })
    function tabBar:Refresh(tabs)
        for _, child in ipairs(self:GetChildren()) do
            if child:IsA("GuiObject") then
                child:Destroy()
            end
        end
        for i, tab in ipairs(tabs) do
            local btn = Create("TextButton", {
                Name = tab.Name,
                Text = tab.Name,
                Size = UDim2.new(
    -- continue the Size property definition:
                    Size = UDim2.new(1/#tabs, 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(50,50,50),
                TextColor3 = Color3.new(1,1,1),
                Font = Enum.Font.SourceSans,
                TextSize = 18,
                Parent = self,
            })
            Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
            btn.MouseButton1Click:Connect(function()
                for _, otherTab in ipairs(tabs) do
                    otherTab._container.Visible = false
                end
                tab._container.Visible = true
            end)
        end
    end
    return tabBar
end

----------------------------------------------------------------
-- Additional Window Methods
----------------------------------------------------------------

-- Toggle the entire UI's visibility (using Enabled so it doesn't remove it from CoreGui)
function Window:ToggleUI()
    self._Main.Enabled = not self._Main.Enabled
end

-- Change the theme for all UI elements
function Window:ChangeTheme(newTheme)
    newTheme = newTheme or {
        Main = Color3.fromRGB(30, 30, 30),
        TabBar = Color3.fromRGB(30, 30, 30),
        Button = Color3.fromRGB(50, 50, 50),
        Text = Color3.new(1, 1, 1)
    }
    self._Main.BackgroundColor3 = newTheme.Main
    if self._tabBar then
        self._tabBar.BackgroundColor3 = newTheme.TabBar
        for _, child in ipairs(self._tabBar:GetChildren()) do
            if child:IsA("TextButton") then
                child.BackgroundColor3 = newTheme.Button
                child.TextColor3 = newTheme.Text
            end
        end
    end
    for _, tab in ipairs(self.Tabs) do
        tab._container.BackgroundColor3 = newTheme.Main
        for _, section in ipairs(tab.Sections) do
            if section.Frame then
                section.Frame.BackgroundColor3 = newTheme.Button
                for _, obj in ipairs(section.Frame:GetChildren()) do
                    if obj:IsA("TextLabel") then
                        obj.TextColor3 = newTheme.Text
                    elseif obj:IsA("TextButton") then
                        obj.BackgroundColor3 = newTheme.Button
                        obj.TextColor3 = newTheme.Text
                    end
                end
            end
        end
    end
end

-- Save current config: iterates over all elements and saves their attributes
function Window:SaveConfig(configName)
    local config = {}
    for _, tab in ipairs(self.Tabs) do
        for _, section in ipairs(tab.Sections) do
            for _, element in ipairs(section.Elements) do
                local cfgType = element:GetAttribute("_configType")
                local cfgValue = element:GetAttribute("_configValue")
                if cfgType and cfgValue ~= nil then
                    config[element.Name] = { type = cfgType, value = cfgValue }
                end
            end
        end
    end
    SokaHubUI.Configs[configName] = config
end

-- Load a saved config (if it exists) and update UI elements accordingly
function Window:LoadConfig(configName)
    local config = SokaHubUI.Configs[configName]
    if config then
        for _, tab in ipairs(self.Tabs) do
            for _, section in ipairs(tab.Sections) do
                for _, element in ipairs(section.Elements) do
                    local cfg = config[element.Name]
                    if cfg then
                        if cfg.type == "toggle" then
                            element.Text = element.Text:gsub("%[.-%]", cfg.value and "[ON]" or "[OFF]")
                        elseif cfg.type == "slider" then
                            local percent = (cfg.value or 0) / 100  -- Assuming max=100 for this demo
                            local slider = element:FindFirstChildWhichIsA("Frame")
                            if slider then
                                slider.Size = UDim2.new(percent, 0, 0, 10)
                            end
                        elseif cfg.type == "keybind" then
                            local label = element:FindFirstChildOfClass("TextLabel")
                            if label then
                                local baseText = string.match(label.Text, "^(.-)%[")
                                label.Text = baseText .. "[" .. cfg.value .. "]"
                            end
                        elseif cfg.type == "button" then
                            -- Button type may not require re-assignment.
                        elseif cfg.type == "colorPicker" then
                            element.BackgroundColor3 = HexToColor3(cfg.value)
                        end
                    end
                end
            end
        end
    end
end

----------------------------------------------------------------
-- Library Entry: Create a new Window
----------------------------------------------------------------

function SokaHubUI:CreateWindow(title)
    local selfWindow = setmetatable({ Tabs = {} }, Window)
    
    -- Main container
    selfWindow._Main = Create("ScreenGui", {
        Name = title or "SokaHub",
        Parent = game:GetService("CoreGui")
    })
    
    local mainFrame = Create("Frame", {
        Size = UDim2.new(0, 400, 0, 300),
        Position = UDim2.new(0.5, -200, 0.5, -150),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Parent = selfWindow._Main,
        Active = true,
        Draggable = false
    })
    Create("UICorner", { CornerRadius = UDim.new(0, 10), Parent = mainFrame })
    
    -- Title bar that allows dragging
    local titleBar = Create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        Parent = mainFrame
    })
    local titleLabel = Create("TextLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        Text = title or "SokaHub",
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSansBold,
        TextSize = 20,
        Parent = titleBar
    })
    MakeDraggable(titleBar, mainFrame)
    
    -- Content container (for tabs/sections)
    local content = Create("Frame", {
        Size = UDim2.new(1, 0, 1, -80),
        Position = UDim2.new(0, 0, 0, 80),
        BackgroundTransparency = 1,
        Parent = mainFrame
    })
    selfWindow._content = content
    
    -- Create the Tab Bar
    selfWindow._tabBar = selfWindow:CreateTabBar()
    
    return selfWindow
end

return SokaHubUI
