--[[
    SokaHub UI Library (Modified)
    Features added in this version:
      • A ScrollingFrame for tab content (sections) so that if content is long it scrolls.
      • Rounded corners and improved color styling for buttons/toggles (Kavo UI–like).
      • Dragging only via the top Title bar instead of the entire window.
      • NewDropdown and NewColorPicker element methods.
      • A ChangeTheme function (both as a method on Window and via SokaHubUI).
      • A ToggleUI function on the Window to show/hide the interface.
      • Config saving/loading functionality:
           ▪ SaveConfig and LoadConfig methods on the Window iterate over each section’s elements.
           ▪ A Settings tab that includes a dropdown for selecting configs, a Save Config button, a ToggleUI button,
             and a Change Theme button.
    Further ideas:
      • Add animations (UI tweening) when a button is hovered.
      • Add notifications for key events.
      • Provide theme switching with custom gradients and fonts.
      • Expand element options (like icons on buttons, extra callbacks for changes).
--]]

local SokaHubUI = {}
SokaHubUI.Configs = {}  -- table to store configuration presets

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

----------------------------------------------------------------
-- Helper color functions
----------------------------------------------------------------
local function Color3ToHex(color)
    local r = math.floor(color.R * 255)
    local g = math.floor(color.G * 255)
    local b = math.floor(color.B * 255)
    return string.format("%02X%02X%02X", r, g, b)
end

local function HexToColor3(hex)
    hex = hex:gsub("#", "")
    local r = tonumber(hex:sub(1,2), 16) / 255
    local g = tonumber(hex:sub(3,4), 16) / 255
    local b = tonumber(hex:sub(5,6), 16) / 255
    return Color3.new(r, g, b)
end

----------------------------------------------------------------
-- Utility functions
----------------------------------------------------------------
local function Create(instance, properties)
    local obj = Instance.new(instance)
    for i, v in pairs(properties or {}) do
        obj[i] = v
    end
    return obj
end

-- Only allow dragging from the title bar.
local function MakeDraggable(dragArea, frame)
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    dragArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragArea.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

----------------------------------------------------------------
-- Core objects
----------------------------------------------------------------
-- Window Object
local Window = {}
Window.__index = Window

-- Create a tab; each tab has its own content container and holds sections.
function Window:CreateTab(name)
    local container = Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
        Parent = self._content,
        CanvasSize = UDim2.new(0, 0, 0, 0),
    })
    local layout = Create("UIListLayout", {
        Parent = container,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
    })
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        container.CanvasSize = UDim2.new(0, container.AbsoluteSize.X, 0, layout.AbsoluteContentSize.Y)
    end)
    container.Visible = (#self.Tabs == 0)  -- first tab visible

    local tab = {
        Name = name,
        Sections = {},
        _container = container,
    }

    -- Methods available on a tab.
    setmetatable(tab, {
        __index = {
            CreateSection = function(self, sectionName)
                local sectionFrame = Create("Frame", {
                    Size = UDim2.new(1, -10, 0, 150),
                    BackgroundColor3 = Color3.fromRGB(30,30,30),
                    BorderSizePixel = 0,
                    Name = sectionName,
                    Parent = self._container,
                })
                Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = sectionFrame })
                
                local sectionLabel = Create("TextLabel", {
                    Size = UDim2.new(1, 0, 0, 30),
                    Text = sectionName,
                    BackgroundTransparency = 1,
                    TextColor3 = Color3.new(1,1,1),
                    Font = Enum.Font.SourceSansBold,
                    TextSize = 20,
                    Parent = sectionFrame,
                })
                local layout = Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = sectionFrame,
                    Padding = UDim.new(0, 5),
                })
                local section = {
                    Frame = sectionFrame,
                    Elements = {}, -- elements for config saving/loading
                }
                -- FIX: insert the section into the tab's Sections table
                table.insert(self.Sections, section)
                
                -- NewToggle: creates a toggle button.
                function section:NewToggle(text, desc, callback)
                    local toggle = { State = false }
                    local btn = Create("TextButton", {
                        Size = UDim2.new(1, -10, 0, 30),
                        Text = text .. "   [OFF]",
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    btn.MouseButton1Click:Connect(function()
                        toggle.State = not toggle.State
                        btn.Text = text .. (toggle.State and "   [ON]" or "   [OFF]")
                        if callback then
                            callback(toggle.State)
                        end
                        btn._configValue = toggle.State
                    end)
                    btn._configType = "toggle"
                    table.insert(self.Elements, btn)
                end

                -- NewSlider: creates a slider that updates a value.
                function section:NewSlider(text, desc, max, min, callback, default)
                    local defaultVal = default or min or 0
                    local sliderFrame = Create("Frame", {
                        Size = UDim2.new(1, -10, 0, 40),
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = sliderFrame })
                    local title = Create("TextLabel", {
                        Size = UDim2.new(1, 0, 0, 20),
                        Text = text .. " (" .. defaultVal .. ")",
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sliderFrame,
                    })
                    local slider = Create("Frame", {
                        Size = UDim2.new(0, 0, 0, 10),
                        BackgroundColor3 = Color3.new(1,1,1),
                        Position = UDim2.new(0, 0, 1, -10),
                        Parent = sliderFrame,
                    })
                    local dragging = false
                    sliderFrame.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = true
                        end
                    end)
                    sliderFrame.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = false
                        end
                    end)
                    sliderFrame.InputChanged:Connect(function(input)
                        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                            local x = math.clamp(input.Position.X - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
                            local percent = x / sliderFrame.AbsoluteSize.X
                            local value = math.floor(min + (max - min) * percent)
                            title.Text = text .. " (" .. value .. ")"
                            slider.Size = UDim2.new(percent, 0, 0, 10)
                            if callback then
                                callback(value)
                            end
                            sliderFrame._configValue = value
                        end
                    end)
                    sliderFrame._configType = "slider"
                    table.insert(self.Elements, sliderFrame)
                end

                -- NewKeybind: allows binding a key to an action.
                function section:NewKeybind(text, desc, key, callback)
                    local keybindFrame = Create("Frame", {
                        Size = UDim2.new(1, -10, 0, 30),
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = keybindFrame })
                    local label = Create("TextLabel", {
                        Size = UDim2.new(0.6, 0, 1, 0),
                        Text = text .. " [" .. key.Name .. "]",
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = keybindFrame,
                    })
                    local btn = Create("TextButton", {
                        Size = UDim2.new(0.4, 0, 1, 0),
                        Text = "Change",
                        BackgroundColor3 = Color3.fromRGB(70,70,70),
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = keybindFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    btn.MouseButton1Click:Connect(function()
                        label.Text = text .. " [Press a key]"
                        local keyConnection
                        keyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                            if gameProcessed then return end
                            key = input.KeyCode
                            label.Text = text .. " [" .. key.Name .. "]"
                            if callback then
                                callback(key)
                            end
                            keybindFrame._configValue = key.Name
                            keyConnection:Disconnect()
                        end)
                    end)
                    keybindFrame._configType = "keybind"
                    table.insert(self.Elements, keybindFrame)
                end

                -- NewButton: creates a regular button.
                function section:NewButton(text, desc, callback)
                    local btn = Create("TextButton", {
                        Size = UDim2.new(1, -10, 0, 30),
                        Text = text,
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = btn })
                    btn.MouseButton1Click:Connect(function()
                        if callback then
                            callback()
                        end
                    end)
                    btn._configType = "button"  -- usually buttons don't store config
                    table.insert(self.Elements, btn)
                end

                -- NewColorPicker: a button that cycles through preset colors.
                function section:NewColorPicker(text, desc, defaultColor, callback)
                    local colorOptions = {
                        Color3.fromRGB(255, 0, 0),
                        Color3.fromRGB(0, 255, 0),
                        Color3.fromRGB(0, 0, 255),
                        Color3.fromRGB(255, 255, 0),
                        Color3.fromRGB(0, 255, 255),
                        Color3.fromRGB(255, 0, 255),
                        Color3.fromRGB(255, 255, 255)
                    }
                    local currentIndex = 1
                    for i, col in ipairs(colorOptions) do
                        if Color3ToHex(col) == Color3ToHex(defaultColor) then
                            currentIndex = i
                            break
                        end
                    end
                    local pickerFrame = Create("Frame", {
                        Size = UDim2.new(1, -10, 0, 30),
                        BackgroundColor3 = Color3.fromRGB(50,50,50),
                        Parent = sectionFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = pickerFrame })
                    local label = Create("TextLabel", {
                        Size = UDim2.new(0.6, 0, 1, 0),
                        Text = text,
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1,1,1),
                        Font = Enum.Font.SourceSans,
                        TextSize = 18,
                        Parent = pickerFrame,
                    })
                    local colorBox = Create("TextButton", {
                        Size = UDim2.new(0.4, -5, 1, 0),
                        Text = "",
                        BackgroundColor3 = colorOptions[currentIndex],
                        Parent = pickerFrame,
                    })
                    Create("UICorner", { CornerRadius = UDim.new(0, 5), Parent = colorBox })
                                        colorBox.MouseButton1Click:Connect(function()
                        currentIndex = (currentIndex % #colorOptions) + 1
                        local newColor = colorOptions[currentIndex]
                        colorBox.BackgroundColor3 = newColor
                        if callback then
                            callback(newColor)
                        end
                        pickerFrame._configValue = Color3ToHex(newColor)
                    end)
                    pickerFrame._configType = "colorpicker"
                    table.insert(self.Elements, pickerFrame)
                end

                return section
            end,
            _container = tab._container
        }
    })

    local tabLabel = Create("TextButton", {
        Size = UDim2.new(0, 100, 0, 30),
        Text = name,
        BackgroundColor3 = Color3.fromRGB(40,40,40),
        TextColor3 = Color3.new(1,1,1),
        Font = Enum.Font.SourceSansBold,
        TextSize = 20,
        Parent = self._tabHolder,
    })

    tabLabel.MouseButton1Click:Connect(function()
        for _, t in ipairs(self.Tabs) do
            t._container.Visible = false
        end
        container.Visible = true
        for _, child in ipairs(self._tabHolder:GetChildren()) do
            if child:IsA("TextButton") then
                child.BackgroundColor3 = Color3.fromRGB(40,40,40)
            end
        end
        tabLabel.BackgroundColor3 = Color3.fromRGB(70,70,70)
    end)

    table.insert(self.Tabs, tab)
    return tab
end

-- ToggleUI: toggles the visibility of the entire UI.
function Window:ToggleUI()
    self.Window.Visible = not self.Window.Visible
end

-- ChangeTheme: updates the theme of the window.
function Window:ChangeTheme(newTheme)
    if newTheme == "DarkTheme" then
        self.Window.BackgroundColor3 = Color3.fromRGB(20,20,20)
        if self.TitleBar then
            self.TitleBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
        end
        if self._tabHolder then
            self._tabHolder.BackgroundColor3 = Color3.fromRGB(30,30,30)
        end
        if self._content then
            self._content.BackgroundColor3 = Color3.fromRGB(25,25,25)
        end
    elseif newTheme == "LightTheme" then
        self.Window.BackgroundColor3 = Color3.fromRGB(240,240,240)
        if self.TitleBar then
            self.TitleBar.BackgroundColor3 = Color3.fromRGB(220,220,220)
        end
        if self._tabHolder then
            self._tabHolder.BackgroundColor3 = Color3.fromRGB(220,220,220)
        end
        if self._content then
            self._content.BackgroundColor3 = Color3.fromRGB(230,230,230)
        end
    end
end

--------------------------------------------------------------------------------
-- Config Functions: SaveConfig and LoadConfig for managing settings.
--------------------------------------------------------------------------------

function Window:SaveConfig(configName)
    local config = {}
    for _, tab in ipairs(self.Tabs) do
        for i, section in ipairs(tab.Sections) do
            for j, element in ipairs(section.Elements) do
                local elementKey = element.Name or ("Element_" .. tostring(j))
                if element._configType then
                    config[elementKey] = element._configValue
                end
            end
        end
    end
    SokaHubUI.Configs[configName] = config
    print("Config saved: " .. configName)
end

function Window:LoadConfig(configName)
    local config = SokaHubUI.Configs[configName]
    if not config then
        warn("Config " .. configName .. " does not exist!")
        return
    end
    for _, tab in ipairs(self.Tabs) do
        for i, section in ipairs(tab.Sections) do
            for j, element in ipairs(section.Elements) do
                local elementKey = element.Name or ("Element_" .. tostring(j))
                local value = config[elementKey]
                if value then
                    if element._configType == "toggle" then
                        element._configValue = value
                        element.Text = string.gsub(element.Text, "%[.+%]", value and "[ON]" or "[OFF]")
                    elseif element._configType == "slider" then
                        element._configValue = value
                        local title = element:FindFirstChildOfClass("TextLabel")
                        if title then
                            title.Text = title.Text:gsub("%(.*%)", "("..value..")")
                        end
                    elseif element._configType == "colorpicker" then
                        element._configValue = value
                        local colorBox = element:FindFirstChildWhichIsA("TextButton")
                        if colorBox then
                            colorBox.BackgroundColor3 = HexToColor3(value)
                        end
                    elseif element._configType == "keybind" then
                        element._configValue = value
                        local label = element:FindFirstChildOfClass("TextLabel")
                        if label then
                            label.Text = label.Text:gsub("%[.*%]", "["..value.."]")
                        end
                    end
                end
            end
        end
    end
    print("Config loaded: " .. configName)
end

--------------------------------------------------------------------------------
-- Library Creation
--------------------------------------------------------------------------------

function SokaHubUI:CreateWindow(title, theme)
    local ScreenGui = Create("ScreenGui", {
        Name = "SokaHubUI",
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    })
    
    local MainFrame = Create("Frame", {
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundColor3 = (theme == "DarkTheme") and Color3.fromRGB(20,20,20) or Color3.fromRGB(240,240,240),
        BorderSizePixel = 0,
        Parent = ScreenGui
    })
    
    local TitleBar = Create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = (theme == "DarkTheme") and Color3.fromRGB(30,30,30) or Color3.fromRGB(220,220,220),
        BorderSizePixel = 0,
        Parent = MainFrame,
    })
    
    local TitleLabel = Create("TextLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        Text = title,
        BackgroundTransparency = 1,
        TextColor3 = (theme == "DarkTheme") and Color3.new(1,1,1) or Color3.new(0,0,0),
        Font = Enum.Font.SourceSansBold,
        TextSize = 24,
        Parent = TitleBar,
    })
    
    local TabHolder = Create("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = (theme == "DarkTheme") and Color3.fromRGB(30,30,30) or Color3.fromRGB(220,220,220),
        BorderSizePixel = 0,
        Parent = MainFrame,
        Position = UDim2.new(0, 0, 0, 30)
    })
    
    local Content = Create("Frame", {
        Size = UDim2.new(1, 0, 1, -70),
        Position = UDim2.new(0, 0, 0, 70),
        BackgroundColor3 = (theme == "DarkTheme") and Color3.fromRGB(25,25,25) or Color3.fromRGB(230,230,230),
        BorderSizePixel = 0,
        Parent = MainFrame,
    })
    local window = {
        Window = MainFrame,
        TitleBar = TitleBar,
        _tabHolder = TabHolder,
        _content = Content,
        Tabs = {}
    }
    
    MakeDraggable(TitleBar, MainFrame)
    
    return setmetatable(window, Window)
end

return SokaHubUI

